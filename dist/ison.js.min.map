{"version":3,"sources":["ison.js"],"names":["types","Date","Object","Array","Number","funcs","Int","parseInt","Float","parseFloat","Boolean","_Boolean","_x","apply","this","arguments","toString","el","toLowerCase","Map","Set","RegExp","Buffer","from","TOKEN_INFINITY","TOKEN_NAN","TOKEN_TRUE","TOKEN_FALSE","TOKEN_NULL","TOKEN_LBRACE","TOKEN_RBRACE","TOKEN_LBRACKET","stringifyKey","key","test","stringify","object","getTime","String","replace","map","join","name","constructor","entries","concat","_toConsumableArray","source","flags","item","destructor","destructed","isNaN","console","log","_typeof","exported_funcs","TOKEN_ESCAPE","TOKEN_NEWLINE","parseIdentifier","skip","value","identifier","printError","is","TOKEN_IDENTIFIER","current","next","printFoundExpectedError","TOKEN_IDENTIFIER_START","parseNumber","TOKEN_WS","num","TOKEN_NUMBER_START","substr","indexOf","TOKEN_NUMBER","parseString","TOKEN_STRING_START","start","out","parseArguments","parseNext","array","push","TOKEN_LPAREN","TOKEN_RPAREN","TOKEN_RBRACKET","TOKEN_COLON","TOKEN_COMMA","parseObject","parseArray","args","Function","prototype","bind","length","parse","Infinity","NaN","token","string","cur","peek","seek","strict","count","found","expected","error","undefined","l_bound","u_bound","Error","substring","padStart","addTypes","i","removeTypes","module","exports","window"],"mappings":"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","file":"ison.js","sourcesContent":["/*!\n * ISON v0.0.12\n * (c) 2018 Rich Infante\n * Released under the MIT License.\n */\n\n(function() {\n\n  \n  // Type constructors\n  // Called with \"new\" to create an instance\n  const types = {\n    'Date': Date,\n    'Object': Object,\n    'Array': Array,\n    'Number': Number\n  }\n\n  // Functions\n  // Called normally with arguments to create instance.\n  const funcs = {\n    'Int': parseInt,\n    'Float': parseFloat,\n    'Boolean': el => new Boolean(el.toLowerCase() == 'true')\n  }\n\n  // Detect Map support\n  if (typeof Map != \"undefined\") {\n    types['Map'] = Map\n  }\n\n  // Detect Set support\n  if (typeof Set != \"undefined\") {\n    types['Set'] = Set\n  }\n\n  // Detect RegExp support\n  if (typeof RegExp != \"undefined\") {\n    types['RegExp'] = RegExp\n  }\n\n  // Detect if buffer.from is available.\n  if (typeof Buffer != \"undefined\") {\n    // If it is, check if Buffer.from() is supported.\n    if (typeof Buffer.from === \"function\") {\n      funcs['Buffer'] = Buffer.from\n    } else {\n      // Fallback to constructor.\n      types['Buffer'] = Buffer\n    }\n  }\n\n  /**\n   * Add types to the ISON parser.\n   * It will instantiate using them\n   * @param {object} object dictionary of object names and constructors.\n   */\n  function addTypes(object) {\n    for(let i in object) {\n      types[i] = object[i]\n    }\n  }\n\n  /**\n   * Remove types from the ISON parser.\n   * It will remove them from the type index.\n   * @param {object} object dictionary of object names and constructors to remove..\n   */\n  function removeTypes(object) {\n    for (let i in object) {\n      if(types[i] === object[i]) {\n        delete types[i]\n      }\n    }\n  }\n\n  function newInstance(name, args) {\n\n    // Create a new instance using a constructor\n    if (types[name]) {\n      return new types[name](...args)\n    }\n    \n    // Create a new instance using functions\n    if (funcs[name]) {\n      return funcs[name](...args)\n    }\n    \n    \n    if (args.length == 1) {\n        return args[0]\n     } else {\n        return args\n     }\n    \n  }\n\n  // Tokens\n  const TOKEN_INFINITY = 'Infinity'\n  const TOKEN_NAN      = 'NaN'\n  const TOKEN_TRUE     = 'true'\n  const TOKEN_FALSE    = 'false'\n  const TOKEN_NULL     = 'null'\n  const TOKEN_LBRACE   = '{'\n  const TOKEN_RBRACE   = '}'\n  const TOKEN_LBRACKET = '['\n  const TOKEN_RBRACKET = ']'\n  const TOKEN_LPAREN   = '('\n  const TOKEN_RPAREN   = ')'\n  const TOKEN_SQUOTE   = `'`\n  const TOKEN_DQUOTE   = `\"`\n  const TOKEN_COMMA    = `,`\n  const TOKEN_COLON    = /[:=]/\n  const TOKEN_WS       = /[ \\n\\t]/\n  const TOKEN_STRING_START = /[\"']/\n  const TOKEN_IDENTIFIER = /[a-z0-9_]/i\n  const TOKEN_IDENTIFIER_START = /[a-z_]/i\n  const TOKEN_NUMBER_START = /[+0-9\\-]/\n  const TOKEN_NUMBER = /[0-9xbo\\.+\\-a-f]/i\n  const TOKEN_ESCAPE = '\\\\'\n  const TOKEN_NEWLINE = '\\n'\n  const TOKEN_LINE_COMMENT = '//'\n  const TOKEN_BLOCK_COMMENT_START = '/*'\n  const TOKEN_BLOCK_COMMENT_END = '*/'\n\n\n  /**\n   * Parse a string using the parser.\n   * @param  {ison string} string ison formatted string representing data.\n   * @throws {Error} If the data is incorrectly formatted.\n   * @return {Any}        the represented data\n   */\n  function parse(string) {\n    var cur = 0\n\n    /**\n     * Convert an identifier into a primitive value.\n     * @param  {string} value a string representing some predefined value.\n     * @return {Any}       the represented value\n     * @throws {Error} If the value is not found.\n     */\n    function fromIdentifier(value) {\n\n      if (value == TOKEN_NULL) { \n        return null\n      }\n\n      if (value == TOKEN_INFINITY) { \n        return Infinity\n      }\n\n      if (value == TOKEN_NAN) { \n        return NaN\n      }\n\n      if (value == TOKEN_TRUE) { \n        return true\n      }\n\n      if (value == TOKEN_FALSE) { \n        return false\n      }\n\n      printError(`Unknown Identifier: \"${value}\"`)\n    }\n\n    /**\n     * Parse an identifier.\n     * @return {[type]} an identifier string.\n     */\n    function parseIdentifier() {\n      skip(TOKEN_WS)\n\n      let identifier = ''\n\n      if (is(TOKEN_IDENTIFIER_START)) {\n        while (is(TOKEN_IDENTIFIER)) {\n          identifier += current()\n          next()\n        }\n      } else {\n        printFoundExpectedError(current(), TOKEN_IDENTIFIER_START)\n      }\n\n      return identifier\n    }\n\n    /**\n     * Parse an identifier. These should be valid JS object keys.\n     * @return {number} The number that was parsed.\n     */\n    function parseNumber() {\n      skip(TOKEN_WS)\n\n      let num = ''\n      if (is(TOKEN_NUMBER_START)) {\n        while (is(TOKEN_NUMBER)) {\n          num += current()\n          next()\n        }\n      } else {\n        printFoundExpectedError(current(), TOKEN_NUMBER_START)\n      } \n\n      if(num.indexOf('0x') == 0) {\n        return parseInt(num.substr(2), 16)\n      } else if(num.indexOf('0b') == 0) {\n        return parseInt(num.substr(2), 2)\n      } else if(num.indexOf('0o') == 0) {\n        return parseInt(num.substr(2), 8)\n      }\n\n      return parseFloat(num)\n    }\n\n    /**\n     * Parse a string\n     * @return {string} the string that was parsed.\n     */\n    function parseString() {\n      if(!is(TOKEN_STRING_START)) {\n        printFoundExpectedError(current(), TOKEN_STRING_START)\n      }\n      \n      let start = current()\n      skip(TOKEN_STRING_START, true, 1)\n      let out = ''\n      \n      while(true) {\n        if(is(TOKEN_ESCAPE)) {\n          out += next()\n        } else if(is(start)) {\n          break\n        } else {\n          out += current()\n        }\n\n        next()\n      }\n\n      skip(TOKEN_STRING_START, true, 1)\n      return out\n    }\n\n    /**\n     * Parse an argument list\n     * @return {array} an array containing all the arguments.\n     */\n    function parseArguments() {\n      skip(TOKEN_LPAREN, true, 1)\n      skip(TOKEN_WS)\n\n      let array = []\n      while(!is(TOKEN_RPAREN)) {\n\n        skip(TOKEN_WS)\n\n        let value = parseNext()\n\n        array.push(value)\n\n        skip(TOKEN_WS)\n\n        // Comma or RBRACE are exit conditions.\n        if (is(TOKEN_COMMA)) {\n          skip(TOKEN_COMMA, true, 1)\n        } else if (is(TOKEN_RPAREN)) {\n          break\n        } else {\n          printFoundExpectedError(current(), ',\" or \")')\n        }\n      }\n\n      skip(TOKEN_WS)\n      skip(TOKEN_RPAREN, true, 1)\n\n      return array\n    }\n\n    /**\n     * Parse an array.\n     * @return {array} returns array items\n     */\n    function parseArray() {\n      skip(TOKEN_LBRACKET, true, 1)\n      skip(TOKEN_WS)\n\n      let array = []\n      while(!is(TOKEN_RBRACKET)) {\n\n        skip(TOKEN_WS)\n\n        let value = parseNext()\n\n        array.push(value)\n\n        skip(TOKEN_WS)\n\n        // Comma or RBRACE are exit conditions.\n        if (is(TOKEN_COMMA)) {\n          skip(TOKEN_COMMA, true, 1)\n        } else if (is(TOKEN_RBRACKET)) {\n          break\n        } else {\n          printFoundExpectedError(current(), ',\" or \"]')\n        }\n      }\n\n      skip(TOKEN_WS)\n      skip(TOKEN_RBRACKET, true, 1)\n\n      return array\n    }\n\n    /**\n     * Parse an object notation block.\n     * @return {object} The represented object.\n     */\n    function parseObject() {\n\n      skip(TOKEN_LBRACE, true, 1)\n      skip(TOKEN_WS)\n\n      let object = {}\n\n      while(!is(TOKEN_RBRACE)) {\n        let key = null\n\n        skip(TOKEN_WS)\n\n        // Allowing quoted keys, use quote opt. to figure out which.\n        if (is(TOKEN_STRING_START)) {\n          key = parseString()\n        } else if (is(TOKEN_NUMBER_START)) {\n          key = parseNumber()\n        } else {\n          key = parseIdentifier()\n        }\n\n        // Skip separator and WS\n        skip(TOKEN_WS)\n        skip(TOKEN_COLON, true, 1)\n        skip(TOKEN_WS)\n\n        // Value can be anything, go next.\n        let value = parseNext()\n\n        // Save the key\n        object[key] = value\n\n\n        skip(TOKEN_WS)\n\n        // Comma or RBRACE are exit conditions.\n        if (is(TOKEN_COMMA)) {\n          skip(TOKEN_COMMA, true, 1)\n        } else if (is(TOKEN_RBRACE)) {\n          break\n        } else {\n          printFoundExpectedError(current(), ',\" or \"}')\n        }\n      }\n\n      skip(TOKEN_RBRACE, true, 1);\n\n      return object\n    }\n\n    /**\n     * Parse the next item.\n     * This is used to parse a value of any type \n     * @return {any} The value\n     */\n    function parseNext() {\n      skip(TOKEN_WS)\n\n      if (is(TOKEN_LBRACE)) {\n        return parseObject()\n      } else if (is(TOKEN_LBRACKET)) {\n        return parseArray()\n      } else if (is(TOKEN_LPAREN)) {\n        return parseArguments()\n      } else if (is(TOKEN_NUMBER_START)) {\n        return parseNumber()\n      } else if (is(TOKEN_STRING_START)) {\n        return parseString()\n      } else if (is(TOKEN_IDENTIFIER_START)){\n        let identifier = parseIdentifier()\n        if(is(TOKEN_LPAREN)) {\n          let args = parseArguments()\n          return newInstance(identifier, args)\n        } else {\n          return fromIdentifier(identifier)\n        }\n      } else {\n        printFoundExpectedError(current())\n      }\n    }\n\n    this.parseNext = parseNext\n\n    /**\n     * Check if the current character is a token\n     * @param  {RegExp|string}  token a token description\n     * @return {Boolean}       does it match the current?\n     */\n    function is(token) {\n      if(token instanceof RegExp) {\n        return token.test(current())\n      } else {\n        return current() == token\n      }\n    }\n\n    /**\n     * Get the character under the cursor\n     * @return {string} the character\n     */\n    function current() {\n      return string[cur]\n    }\n\n    /**\n     * Advance the cursor and get the next value\n     * @throws {Error} If we need a next character and we found EOF.\n     * @return {string} the next character\n     */\n    function next () {\n      cur += 1\n      if (cur > string.length) {\n        printError('Unexpected EOF!')\n      }\n      return current()\n    }\n\n    /**\n     * Returns the next character in the input string.\n     * @return {string} next input character\n     */\n    function peek() {\n      return string[cur + 1]\n    }\n\n\n    /**\n     * Seek forward in the input for a specific token\n     * @param  {RegExp|string} token token to find.\n     */\n    function seek (token) {\n      while(!is(token)) {\n        next()\n      }\n    }\n\n    /**\n     * Skip matching tokens.\n     * @param  {RegExp|String}  token  token to skip\n     * @param  {Boolean} strict should we fail if this cannot be found?\n     * @param  {Number}  count  skip a certain amount of tokens.\n     */\n    function skip(token, strict=false, count=Infinity) {\n      let old = cur\n\n      // If we're in strict mode, fail immediately.\n      if (strict && !is(token)) {\n        printFoundExpectedError(current(), token)\n      }\n\n      // While it matches, continue.\n      while(is(token) && count > 0) {\n        cur += 1\n        count -= 1\n      }\n\n      // If we're skipping whitespace, \n      // Perform a skip for comments as well, if the token matches.\n      if (token == TOKEN_WS) {\n\n        // If we're on a line comment\n        if (current() + peek() == TOKEN_LINE_COMMENT) {\n          // Seek past it\n          seek(TOKEN_NEWLINE)\n        }\n\n        // If we're on a block comment\n        if (current() + peek() == TOKEN_BLOCK_COMMENT_START) {\n          \n          while(true) {\n            // Seek to the next '*'  \n            seek('*')\n\n            // If it makes up a comment end, break.\n            if (current() + peek() == TOKEN_BLOCK_COMMENT_END) {\n              break\n            } else {\n              // Otherwise, continue.\n              next()\n            }\n          }\n\n          // Skip past the end comment.\n          next()\n          next()\n        }\n\n        // If it's still whitespace, skip.\n        // TOKEN_WS can only handle one comment at a time.\n        if (is(TOKEN_WS)) {\n          skip(TOKEN_WS)\n        }\n      }\n    }\n\n    function printFoundExpectedError(found, expected) {\n      printError(`Unexpected Token. found: \"${found}\" (${found.charCodeAt(0)}), expected: \"${expected}\"`)\n    }\n\n    /**\n     * Throw an error, internal use function.\n     * throws an error with source printout, error description.\n     * @throws {Error} If true\n     * @param  {String} error error description\n     */\n    function printError(error='Unknown Error') {\n      let current = cur\n      let l_bound = current - 10\n      if(l_bound < 0) {\n        l_bound = 0\n      }\n\n      let u_bound = current + 10\n      if (u_bound >= string.length) {\n        u_bound = string.length - 1\n      }\n\n      let count = current - l_bound\n\n      throw new Error(`Could not parse input.\n${string.substring(l_bound, u_bound).replace(/\\n/g, ' ')}\n${'^'.padStart(count + 1)}\n${error}\nat input: ${cur}`)\n    }\n\n    return parseNext()\n  }\n\n  /**\n   * Stringify a key.\n   * This may add quotes if it does not conform to bare key requirements.\n   * \n   * @param  {string} key the object key\n   * @return {string}     string representing the key.\n   */\n  function stringifyKey(key) {\n    if(/^[a-zA-Z_][_a-zA-Z0-9]*$/.test(key)) {\n      return key\n    } else {\n      return stringify(key)\n    }\n  }\n\n\n  /**\n   * Stringify an object, recursively\n   * @param  {object} object to stringify\n   * @return {string}        string representation\n   */\n  function stringify(object) {\n    if (object instanceof Date) {\n      // Serialize dates\n      return `Date(${object.getTime()})`\n    } else if (typeof object == 'string' || object instanceof String) {\n      // Place into double quoted (escaped) strings\n      return `\"${object.replace(/\"/g, '\\\\\"')}\"`\n    } else if (object instanceof Array) {\n      // Join the stringification of children\n      return `[${object.map(stringify).join(',')}]`\n    } else if(object.constructor.name == 'Set') {\n      return `Set(${stringify(Array.from(object))})`\n    } else if(object.constructor.name == 'Map') {\n      return `Map(${stringify(Array.from(object.entries()))})`\n    } else if (typeof Buffer != \"undefined\" && object instanceof Buffer) {\n      return `Buffer([${[...object]}])`\n    } else if(object instanceof RegExp){\n      return `RegExp(${stringify(object.source)}, ${stringify(object.flags)})`\n    } else if (typeof object == 'boolean') {\n      return `${object}`\n    } else if (object instanceof Object) {\n      let name = object['$type'] || object.constructor.name\n\n      delete object['$type']\n\n      // Join key value pairs. Possibly use $type or constructor name\n      if (name == 'Object') {\n        return `{${Object.entries(object).map((item) => {\n          return `${stringifyKey(item[0])}:${stringify(item[1])}`\n        }).join(',')}}`\n      } else {\n        if (typeof object.destructor == 'function') {\n          let destructed = object.destructor()\n          if(destructed instanceof Array) {\n            return `${name}(${destructed.map(stringify).join(',')})`\n          } else {\n            return `${name}(${stringify(destructed)})`\n          }\n        } else {\n          return `${name}({${Object.entries(object).map((item) => {\n            return `${stringifyKey(item[0])}:${stringify(item[1])}`\n          }).join(',')}})`\n        }\n      }\n    } else if (isNaN(object)) {\n      return 'NaN'\n    } else if (typeof object == 'number') {\n      // Number\n      return `${object}`\n    } else {\n      console.log(object, typeof object)\n      throw new Error('Stringify Error!')\n    }\n  }\n\n  // Module shim.\n  var exported_funcs = { parse, stringify, addTypes, removeTypes }\n\n  if(typeof module != \"undefined\") {\n    module.exports = exported_funcs\n  } else if (typeof window != \"undefined\") {\n    window['ISON'] = exported_funcs\n  }\n\n})();"]}